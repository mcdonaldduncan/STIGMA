import React, { useState, useRef } from 'react';
import { Share, StyleSheet, Linking, View, Button, StatusBar, TouchableOpacity, Text, SafeAreaView } from 'react-native';
import { Touchable } from '@draftbit/ui';
import { Video } from 'expo-av';
import PhoneInput from "react-native-phone-number-input";
import call from 'react-native-phone-call';
import * as SMS from 'expo-sms';

export const ShareBtn = ({children, media_url}) => {
  
  const handleShare = async () => {
    try {
      const result = await Share.share({
        message: `${media_url}`,
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      alert(error.message);
    }
  };
  return (
    <Touchable onPress={handleShare}>
    {children}
    </Touchable>
    
  );
};

//export { ShareBtn };

export const PhoneButton = ({num, children}) => {
  
  const triggerCall = () => {
    const args = {
      number: `${num}`,
      prompt: true,
    };
    call(args).catch(console.error);
  };

  return (
    <Touchable onPress={triggerCall}>
    {children}
    </Touchable>
  )
};

export const DynamicButton = ({num, children, type}) => {
  
  const triggerAction = () => {
    
    if (type == "Visit") {
      Linking.openURL(`${num}`);
    }
    if (type == "Call") {
      const args = {
        number: `${num}`,
        prompt: true,
      };
      call(args).catch(console.error);
    }
  };

  const triggerAsyncAction = async () => {

    const isAvailable = await SMS.isAvailableAsync();
    
    if (isAvailable) {
      await SMS.sendSMSAsync("741-741", "TALK");
    } else {
      alert('Message service not available on this device');
    }

  };

  return (
    <Touchable onPress= {(type == "Text") ? triggerAsyncAction : triggerAction}>
    {children}
    </Touchable>
  )
};


export const CustomVideo = ({startingPoint, media_url, current_id, story_id}) => {
  if (current_id !== story_id) {
    startingPoint = 0;
  } 
  return (
      <Video
      style={styles.Videoar}
      source={{ uri: `${media_url}` }}
      resizeMode={'cover'}
      useNativeControls={true}
      shouldPlay={false}
      positionMillis={startingPoint}
    />
    
  )
}

export const phoneInput = ({currentNum}) => {
  const [value, setValue] = useState("");
  const [formattedValue, setFormattedValue] = useState("");
  const [valid, setValid] = useState(false);
  const [showMessage, setShowMessage] = useState(false);
  const phoneInput = useRef<PhoneInput>(null);
  if(currentNum !== null)
  {
    value = currentNum;
  }
  return(
    <>
      <StatusBar barStyle="dark-content" />
      <View style={styles.container}>
        <SafeAreaView style={styles.wrapper}>
          {showMessage && (
            <View style={styles.message}>
              <Text>Value : {value}</Text>
              <Text>Formatted Value : {formattedValue}</Text>
              <Text>Valid : {valid ? "true" : "false"}</Text>
            </View>
          )}
          <PhoneInput
            ref={phoneInput}
            defaultValue={value}
            defaultCode="US"
            layout="first"
            onChangeText={(text) => {
              setValue(text);              
            }}
            onChangeFormattedText={(text) => {
              setFormattedValue(text);
            }}
            withDarkTheme
            withShadow
            autoFocus
          />
          <TouchableOpacity
            style={styles.button}
            onPress={() => {
              const checkValid = phoneInput.current?.isValidNumber(value);
              setShowMessage(true);
              setValid(checkValid ? checkValid : false);
            }}
          >
            <Text>Check</Text>
          </TouchableOpacity>
        </SafeAreaView>
      </View>
    </>
  )
}

const styles = StyleSheet.create({
  Videoar: {
    height: '100%',
  },
});